@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent;

<root>
    <div class="title">Tab Menu</div>

    <!-- TODO this should be modularized -->
    <div class="main">
        <div class="side-bar">
            <div class="buttoncontainer">
                <button class="button @(IsJobsVisible ? "active" : "")" onclick="@DisplayJobs"> <i class="icon">work</i> Jobs </button>
                <button class="button @(IsDarkWebVisible ? "active" : "")" onclick="@DisplayDarkWeb"> <i class="icon">store</i> Dark Web </button>
                <button class="button @(IsPropsVisible ? "active" : "")" onclick="@DisplayProps"> <i class="icon">folder</i> Props </button> 
            </div>
            <div class="buttoncontainer">
                <button class="button @(IsAdminVisible ? "active" : "")" onclick="@DisplayAdmin"> <i class="icon">local_police</i> Admin Tools </button>
                <button class="button @(IsInfoVisible ? "active" : "")" onclick="@DisplayInfo"> <i class="icon">info</i> Information </button>
                <button class="button" onclick=@GitHubLink style="color:#4078c0;"> <i class="icon">web</i> @GitHub </button>
                <button class="button" onclick=@DiscordLink style="color:#7289da;"> <i class="icon">discord</i> @Discord </button>
            </div>
        </div>
        <div class="main-container">
            <!-- Dark Web Section -->
            <div class="section" style="display: @(IsDarkWebVisible ? "flex" : "none");">
                <div class="section-title">Dark Web</div>
                <div class="section-contents">

                    <div class="button" onclick=@(() => BuyPrinter(PrinterType.Bronze, 500))>
                        <div class="icon" style="background-color: #A52A2A"></div>
                        <div class="label-container">
                            <div class="label">Bronze Printer</div>
                            <span class="description">@CurrentPrinter / @MaxPrinter</span>
                            <span class="description">Slow</span>
                            <div class="price">$500</div>
                        </div>
                    </div>

                    <div class="button" onclick=@(() => BuyPrinter(PrinterType.Silver, 1200))>
                        <div class="icon" style="background-color: #DCDCDC"></div>
                        <div class="label-container">
                            <div class="label">Silver Printer</div>
                            <span class="description">@CurrentPrinter / @MaxPrinter</span>
                            <span class="description">Average</span>
                            <div class="price">$1,200</div>
                        </div>
                    </div>

                    <div class="button" onclick=@(() => BuyPrinter(PrinterType.Gold, 2600))>
                        <div class="icon" style="background-color: #FFD700"></div>
                        <div class="label-container">
                            <div class="label">Gold Printer</div>
                            <span class="description">@CurrentPrinter / @MaxPrinter</span>
                            <span class="description">Fast</span>
                            <div class="price">$2,600</div>
                        </div>
                    </div>

                    <div class="button" onclick=@(() => BuyPrinter(PrinterType.Diamond, 4200))>
                        <div class="icon" style="background-color: #40E0D0"></div>
                        <div class="label-container">
                            <div class="label">Diamond Printer</div>
                            <span class="description">@CurrentPrinter / @MaxPrinter</span>
                            <span class="description">Super-fast</span>
                            <div class="price">$4,200</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Jobs Section -->
            <div class="section" style="display: @(IsJobsVisible ? "flex" : "none");">
                <div class="section-title">Jobs</div>
                <div class="section-contents">
                    @foreach (var job in new int[] { 1, 2, 3, 4, 5, 6, 7, 8 })
                    {
                        <div class="button">
                            <div class="icon"></div>
                            <div class="label-container">
                                <div class="label">Job @job</div>
                                <div class="description">Job @job description</div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Props Section -->
            <div class="section" style="display: @(IsPropsVisible ? "flex" : "none");">
                <div class="section-title">Props</div>
                <div class="section-contents">
                    <div class="info" style="color: red;">
                        <h1>WIP</h1>
                    </div>
                </div>
            </div>

            <!-- Information Section -->
            <div class="section" style="display: @(IsInfoVisible ? "flex" : "none");">
                <div class="section-title">Information</div>
                <div class="section-contents">

                    <div class="info" style="color: #556B2F;">
                        <h1>Completed</h1>
                        <p>@InfoDone</p>
                    </div>
                    
                    <div class="info" style="color: #8B0000;">
                        <h1>TODO</h1>
                        <p>@InfoTodo</p>
                    </div>
                    
                    <div class="info" style="color: #DAA520;">
                        <h1>Notes</h1>
                        <p>@InfoNotes</p>
                    </div>
                    
                    <div class="info" style="color: #DCDCDC;">
                        <h1>Credits</h1>
                        <p>@InfoCredits</p>
                    </div>

                </div>
            </div>

        <!-- Admin Section -->
        <div class="section" style="display: @(IsAdminVisible ? "flex" : "none");">
            <div class="section-title">Admin Tools</div>
            <div class="section-contents">
                <div class="info" style="color: red;">
                    <h1>TODO</h1>
                </div>
            </div>
        </div>
    </div>
    </div>
</root>

@code
{
    [Property] GameObject PrinterPrefab { get; set; } // Printer Prefab Reference
    [Property] GameObject PlayerPrefab { get; set; } // Player Prefab Reference

    [Property, TextArea] public string InfoDone { get; set; } = "Hello World!";
    [Property, TextArea] public string InfoTodo { get; set; } = "Hello World!";
    [Property, TextArea] public string InfoNotes { get; set; } = "Hello World!";
    [Property, TextArea] public string InfoCredits { get; set; } = "Hello World!";

    int MaxPrinter = 5;
    int CurrentPrinter = 0;

    string Discord = "Discord";
    string GitHub = "GitHub";

    // Boolean properties to control visibility
    bool IsDarkWebVisible = false, IsJobsVisible = false, IsInfoVisible = true, IsAdminVisible = false, IsPropsVisible = false;

    // Enum to represent different types of printers
    enum PrinterType {Bronze,Silver,Gold,Diamond}

    // Generic method to purchase a printer
    void BuyPrinter(PrinterType type, float price)
    {
        // Check if we can add another printer
        if (CurrentPrinter < MaxPrinter)
        {
            // Try to remove money first ( RemoveMoney() is a function in the PlayerStats Component )
            bool hasEnoughMoney = PlayerPrefab.Components.Get<PlayerStats>().RemoveMoney(price);

            if (hasEnoughMoney)
            {
                Vector3 Offset = GameObject.Parent.Transform.Local.Forward;
                Vector3 PlayerPos = GameObject.Parent.Transform.World.Position + Offset * 50;
                GameObject Printer = PrinterPrefab.Clone(PlayerPos);

                // Get PrinterLogic component
                var printerLogic = Printer.Components.Get<PrinterLogic>();

                // Assign the color based on the printer type
                switch (type)
                {
                    case PrinterType.Bronze:
                        printerLogic.SetPrinterType(PrinterLogic.PrinterType.Bronze);
                        break;
                    case PrinterType.Silver:
                        printerLogic.SetPrinterType(PrinterLogic.PrinterType.Silver);
                        break;
                    case PrinterType.Gold:
                        printerLogic.SetPrinterType(PrinterLogic.PrinterType.Gold);
                        break;
                    case PrinterType.Diamond:
                        printerLogic.SetPrinterType(PrinterLogic.PrinterType.Diamond);
                        break;
                }

                Printer.NetworkSpawn();  // It spawns on all clients
                CurrentPrinter++;
            }
            else
            {
                // Not enough money ( the error sound is already handled no need to add one here)
            }
        }
        else
        {
            // Max printers reached
            Sound.Play("audio/error.sound");
        }
    }

    // Display methods for each section
    void DisplayDarkWeb() { IsDarkWebVisible = true; IsJobsVisible = false; IsInfoVisible = false; IsAdminVisible = false; IsPropsVisible = false; Sound.Play("audio/select.sound"); }
    void DisplayJobs()    { IsDarkWebVisible = false; IsJobsVisible = true; IsInfoVisible = false; IsAdminVisible = false; IsPropsVisible = false; Sound.Play("audio/select.sound"); }
    void DisplayInfo()    { IsDarkWebVisible = false; IsJobsVisible = false; IsInfoVisible = true; IsAdminVisible = false; IsPropsVisible = false; Sound.Play("audio/select.sound"); }
    void DisplayAdmin()   { IsDarkWebVisible = false; IsJobsVisible = false; IsInfoVisible = false; IsAdminVisible = true; IsPropsVisible = false; Sound.Play("audio/select.sound"); }
    void DisplayProps()   { IsDarkWebVisible = false; IsJobsVisible = false; IsInfoVisible = false; IsAdminVisible = false; IsPropsVisible = true; Sound.Play("audio/select.sound"); }

    async void DiscordLink() { 
        Sound.Play("audio/select.sound");
        try{
            Clipboard.SetText("https://discord.gg/yBDk9Xr6VB");
            Discord = "Discord - Copied!";
            await Task.Delay(1500);
            Discord = "Discord";
            StateHasChanged();
        }catch{
            Log.Error("Failed to copy to clipboard");
        }
    }

    async void GitHubLink() { 
        Sound.Play("audio/select.sound");
        try{
            Clipboard.SetText("https://github.com/sousou63/DarkRP");
            GitHub = "GitHub - Copied!";
            await Task.Delay(1500);
            GitHub = "GitHub";
            StateHasChanged();
        }catch{
            Log.Error("Failed to copy to clipboard");
        }
    }
    /// <summary>
    /// The BuildHash method determines if the system should be rebuilt.
    /// If it changes, the system will be rebuilt.
    /// </summary>
    protected override int BuildHash() => System.HashCode.Combine(InfoDone, InfoTodo, InfoNotes);
}
