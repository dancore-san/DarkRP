@using Sandbox;
@using Sandbox.UI;
@using GameSystems.Player;
@inherits PanelComponent

<root>
    <div style="font-color:white; font-size: 25px; margin-top: 50px; margin-left: 50px; text-shadow: 2px 2px 4px #000000;">@MyStringValue</div>
    <div class="player-card">
        <div class="player-details-container">
            <div class="container">
            
                <div class="name">@Rpc.Caller.DisplayName.Truncate(13)</div>
                <div class="job">@MyStringValue3</div>
            </div>
        </div>
        <div class="money">$ @(PlayerPrefab.Components.Get<Stats>().MoneyBase.ToString("N0"))</div>
        <div class="bars">
            <div class="bar">
                <div class="fill" style="width:@(PlayerPrefab.Components.Get<Stats>().HealthBase * 4); background-color: rgb(180, 71, 71);">
                <div class="bar-text">@(PlayerPrefab.Components.Get<Stats>().HealthBase.ToString("N0")) </div>
                </div>
            </div>
            <div class="bar">
                <div class="fill" style="width:@(PlayerPrefab.Components.Get<Stats>().FoodBase * 4); background-color: rgb(219, 157, 42);">
                <div class="bar-text">@(PlayerPrefab.Components.Get<Stats>().FoodBase.ToString("N0"))</div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="crosshair">
    </div>

    <div class="notifications">
        @foreach (var notification in Notifications)
        {
            <div class="notification">
                @if (notification.type == NotificationType.Info)
                {
                    <i class="icon" style="color:#3273eb;">info</i>
                }
                @if (notification.type == NotificationType.Warning)
                {
                    <i class="icon" style="color: yellow">warning</i>
                }
                @if (notification.type == NotificationType.Error)
                {
                    <i class="icon" style="color:red">warning</i>
                }
                <div class="message">@notification.message</div>
            </div>
        }
    </div>

    <div class="slot selector box">

        @if (PlayerPrefab.Components.Get<Inventory>().isInventoryVisible)

        {

            @for (int i = 1; i <= PlayerPrefab.Components.Get<Inventory>().maxSlots; i++)

        {
                if (i != PlayerPrefab.Components.Get<Inventory>().currentSelectedSlot )
                {
                <div class="slot container box" style="color:white">
                <div class="slot font">@i</div>
                </div>
                }

                else
                {
                    <div class="slot container box" style="color:white; background: linear-gradient(90deg, rgba(51, 116, 255, 1) 0%, rgba(25, 25, 29, 0.357) 10%);">
                        <div class="slot font">@i</div>
                    </div>
                }

        }

        }

    </div>

</root>

@code
{
    [Property] GameObject PlayerPrefab { get; set; } // Reference my Player Prefab // code to acces my component : @(PlayerPrefab.Components.Get<Stats>().MoneyBase)

    [Property, TextArea] public string MyStringValue { get; set; } = "Hello World!";
    [Property, TextArea] public string MyStringValue3 { get; set; } = "Hello World!";

    public enum NotificationType
    {
        Info,
        Warning,
        Error
    }
    record Notification(NotificationType type, string message, RealTimeSince timeSinceAdded);
    List<Notification> Notifications { get; set; } = new();
    public void Notify(NotificationType type, string message)
    {
        // TODO play sound from here
        switch (type)
        {
            case NotificationType.Info:
                Sound.Play("audio/select.sound");
                break;
            case NotificationType.Warning:
                Sound.Play("audio/error.sound");
                break;
            case NotificationType.Error:
                Sound.Play("audio/error.sound");
                break;
        }
        Notifications.Add(new Notification(type, message, 0));
    }

    protected override void OnFixedUpdate()
    {
        Notifications.RemoveAll(x => x.timeSinceAdded > 3);

    }

    /// <summary>
    /// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
    /// </summary>
    protected override int BuildHash() => System.HashCode.Combine(MyStringValue, MyStringValue3, PlayerPrefab.Components.Get<Stats>().MoneyBase, PlayerPrefab.Components.Get<Stats>().FoodBase, PlayerPrefab.Components.Get<Stats>().HealthBase, Notifications.Count, PlayerPrefab.Components.Get<Inventory>().isInventoryVisible, PlayerPrefab.Components.Get<Inventory>().currentSelectedSlot);
}
